#!/usr/bin/env python3

import json
import sqlite3
import sys

from typing import Any
from typing import Dict
from typing import Tuple


class Main:
    "This is the main class."

    __old_test_helper = "https://wcth.ooni.io/"

    __new_test_helper = "https://1.th.ooni.org/"

    __log_tcp_connect = False

    __log_http_request_body_length = False

    __log_http_request_failure = False

    __log_http_request_title = False

    __log_http_request_headers = False

    __log_http_request_status_code = False

    __log_dns = False

    def __init__(self):
        self._conn = sqlite3.connect("database.sqlite3")
        self._data: Dict[Tuple[str, str], Any] = {}
        self._stats: Dict[str, int] = {}
        cur = self._conn.execute("select backend, target, json from results;")
        for entry in cur:
            backend: str = str(entry[0])
            target: str = str(entry[1])
            self._data[(backend, target)] = json.loads(entry[2])

    def run(self):
        """walks the test lists and fetches URLs using the
        available test helpers."""
        for target_url in open("alltestlists.txt"):
            target_url = target_url.strip()
            try:
                self._run_with_url(target_url)
            except Exception as exc:
                self._log("{}: {}".format(target_url, exc))
                self._increment_counter_for("processing_failed")
            else:
                self._increment_counter_for("processing_succeeded")
        json.dump(self._stats, sys.stdout, sort_keys=True)

    def _run_with_url(self, target_url: str):
        old_id = (self.__old_test_helper, target_url)
        if old_id not in self._data:
            return
        old_data = self._data[old_id]
        new_id = (self.__new_test_helper, target_url)
        if new_id not in self._data:
            return
        new_data = self._data[new_id]
        self._compare_tcp_connect(target_url, old_data, new_data)
        self._compare_http_request(target_url, old_data, new_data)
        self._compare_dns(target_url, old_data, new_data)

    def _increment_counter_for(self, key: str) -> None:
        self._stats.setdefault(key, 0)
        self._stats[key] += 1

    def _log(self, *args: Any) -> None:
        print(*args, file=sys.stderr)

    def _compare_tcp_connect(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["tcp_connect"], new_data["tcp_connect"]
        old_data = self._filter_tcp_connect(old_data)
        new_data = self._filter_tcp_connect(new_data)
        diff: Any = []
        for epnt, result in old_data.items():
            if epnt not in new_data:
                self._increment_counter_for("tcp_connect/removed_ivp4")
                diff.append(("-", epnt))
            elif result != new_data[epnt]:
                self._increment_counter_for("tcp_connect/different_ivp4")
                diff.append(("!", epnt))
        for epnt, result in new_data.items():
            if epnt not in old_data:
                self._increment_counter_for("tcp_connect/added_ivp4")
                diff.append(("+", epnt))
        if not diff:
            return
        self._increment_counter_for("tcp_connect")
        if self.__log_tcp_connect:
            self._log('"===== BEGIN TCP_CONNECT DIFFERENCES FOR', target_url, '====="')
            self._log(diff)
            self._log('"===== END TCP_CONNECT DIFFERENCES FOR', target_url, '====="')

    def _filter_tcp_connect(self, data: Any) -> Any:
        out: Dict[Any, Any] = {}
        for k, v in data.items():
            if k.startswith("["):
                # Here we are skipping IPv6 addresses _because_ we know
                # the old test helper cannot handle them.
                continue
            if v["failure"] == "connection_refused_error":
                # Here we are normalizing the values returned by the
                # legacy TH to be the same of the new TH. Ugly.
                v["failure"] = "connection_refused"
            if v["failure"] is not None and v["failure"].endswith("no route to host"):
                # Here we are normalizing the values returned by the
                # new TH to be the same of the old TH. Ugly.
                v["failure"] = "connect_error"
            out[k] = v
        return out

    def _compare_http_request(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["http_request"], new_data["http_request"]
        if old_data == new_data:
            return
        self._compare_http_body_length(target_url, old_data, new_data)
        self._compare_http_failure(target_url, old_data, new_data)
        self._compare_http_title(target_url, old_data, new_data)
        self._compare_http_headers(target_url, old_data, new_data)
        self._compare_http_status_code(target_url, old_data, new_data)

    def _compare_http_body_length(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["body_length"], new_data["body_length"]
        if old_data == new_data:
            return
        if old_data == -1:
            old_data = 0  # This is a bug in the new TH implementation
        self._increment_counter_for("http_body_length")
        if old_data < new_data:
            self._increment_counter_for("http_body_length/new_th_smaller")
        else:
            self._increment_counter_for("http_body_length/new_th_larger")
        if self.__log_http_request_body_length:
            self._log(
                '"===== BEGIN HTTP_REQUEST.BODY_LENGTH DIFFERENCES FOR',
                target_url,
                '====="',
            )
            self._log(old_data)
            self._log(new_data)
            self._log(
                '"===== END HTTP_REQUEST.BODY_LENGTH DIFFERENCES FOR', target_url, '====="'
            )

    def _compare_http_failure(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["failure"], new_data["failure"]
        if old_data == new_data:
            return
        self._increment_counter_for("http_failure")
        if self.__log_http_request_failure:
            self._log('"===== BEGIN HTTP_REQUEST.FAILURE DIFFERENCES FOR', target_url, '====="')
            self._log(old_data)
            self._log(new_data)
            self._log('"===== END HTTP_REQUEST.FAILURE DIFFERENCES FOR', target_url, '====="')

    def _compare_http_title(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["title"], new_data["title"]
        if old_data == new_data:
            return
        self._increment_counter_for("http_title")
        if self.__log_http_request_title:
            self._log('"===== BEGIN HTTP_REQUEST.TITLE DIFFERENCES FOR', target_url, '====="')
            self._log(old_data)
            self._log(new_data)
            self._log('"===== END HTTP_REQUEST.TITLE DIFFERENCES FOR', target_url, '====="')

    def _compare_http_headers(self, target_url: str, old_data: Any, new_data: Any):
        # Implementation note: here we only compare the header keys under
        # the (reasonable?) assumption it is hard to compare values
        old_data, new_data = old_data["headers"], new_data["headers"]
        if old_data is None and new_data is None:
            return
        if old_data is None or new_data is None:
            self._increment_counter_for("http_headers")
            return
        old_data = set([k.lower() for k in old_data.keys()])
        new_data = set([k.lower() for k in new_data.keys()])
        diff: Any = []
        for k in old_data:
            if k not in new_data:
                diff.append(("-", k))
        for k in new_data:
            if k not in old_data:
                diff.append(("+", k))
        if not diff:
            return
        self._increment_counter_for("http_headers")
        if self.__log_http_request_headers:
            self._log('"===== BEGIN HTTP_REQUEST.HEADERS DIFFERENCES FOR', target_url, '====="')
            for mod, val in diff:
                self._log(mod, val)
            self._log('"===== END HTTP_REQUEST.HEADERS DIFFERENCES FOR', target_url, '====="')

    def _compare_http_status_code(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["status_code"], new_data["status_code"]
        if old_data == new_data:
            return
        self._increment_counter_for("http_status_code")
        if self.__log_http_request_status_code:
            self._log(
                '"===== BEGIN HTTP_REQUEST.STATUS_CODE DIFFERENCES FOR',
                target_url,
                '====="',
            )
            self._log(old_data)
            self._log(new_data)
            self._log(
                '"===== END HTTP_REQUEST.STATUS_CODE DIFFERENCES FOR', target_url, '====="'
            )

    def _compare_dns(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = sorted(old_data["dns"]), sorted(new_data["dns"])
        if old_data == new_data:
            return
        self._increment_counter_for("dns")
        if self.__log_dns:
            self._log('"===== BEGIN DNS DIFFERENCES FOR', target_url, '====="')
            self._log(old_data)
            self._log(new_data)
            self._log('"===== END DNS DIFFERENCES FOR', target_url, '====="')


def main():
    "Main function."
    main = Main()
    main.run()


if __name__ == "__main__":
    main()
