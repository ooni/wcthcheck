#!/usr/bin/env python3

import json
import sqlite3
import sys

from typing import Any
from typing import Dict
from typing import Tuple


class Main:
    "This is the main class."

    __helpers = [
        "https://1.th.ooni.org/",
        "https://wcth.ooni.io/",
    ]

    def __init__(self):
        self._conn = sqlite3.connect("database.sqlite3")
        self._data: Dict[Tuple[str, str], str] = {}
        cur = self._conn.execute("select backend, target, json from results;")
        for entry in cur:
            backend: str = str(entry[0])
            target: str = str(entry[1])
            self._data[(backend, target)] = str(entry[2])

    def run(self):
        """walks the test lists and fetches URLs using the
        available test helpers."""
        for target_url in open("alltestlists.txt"):
            try:
                self._run_with_url(target_url)
            except Exception as exc:
                print(exc, file=sys.stderr)

    def _run_with_url(self, target_url: str):
        target_url = target_url.strip()
        old_id = (self.__helpers[1], target_url)
        if old_id not in self._data:
            return
        old_data = json.loads(self._data[old_id])
        new_id = (self.__helpers[0], target_url)
        if new_id not in self._data:
            return
        new_data = json.loads(self._data[new_id])
        self._compare_tcp_connect(target_url, old_data, new_data)
        self._compare_http_request(target_url, old_data, new_data)
        self._compare_dns(target_url, old_data, new_data)

    def _compare_tcp_connect(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["tcp_connect"], new_data["tcp_connect"]
        old_data = self._filter_tcp_connect(old_data)
        new_data = self._filter_tcp_connect(new_data)
        if old_data == new_data:
            return
        print('"===== BEING TCP_CONNECT DIFFERENCES FOR', target_url, '====="')
        print(old_data)
        print(new_data)
        print('"===== END TCP_CONNECT DIFFERENCES FOR', target_url, '====="')

    def _filter_tcp_connect(self, data: Any) -> Any:
        out: Dict[Any, Any] = {}
        for k, v in data.items():
            if k.startswith("["):
                continue
            out[k] = v
        return out

    def _compare_http_request(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["http_request"], new_data["http_request"]
        if old_data == new_data:
            return
        self._compare_http_body_length(target_url, old_data, new_data)
        self._compare_http_failure(target_url, old_data, new_data)
        self._compare_http_title(target_url, old_data, new_data)
        self._compare_http_headers(target_url, old_data, new_data)
        self._compare_http_status_code(target_url, old_data, new_data)

    def _compare_http_body_length(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["body_length"], new_data["body_length"]
        if old_data == new_data:
            return
        print(
            '"===== BEING HTTP_REQUEST.BODY_LENGTH DIFFERENCES FOR',
            target_url,
            '====="',
        )
        print(old_data)
        print(new_data)
        print(
            '"===== END HTTP_REQUEST.BODY_LENGTH DIFFERENCES FOR', target_url, '====="'
        )

    def _compare_http_failure(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["failure"], new_data["failure"]
        if old_data == new_data:
            return
        print('"===== BEING HTTP_REQUEST.FAILURE DIFFERENCES FOR', target_url, '====="')
        print(old_data)
        print(new_data)
        print('"===== END HTTP_REQUEST.FAILURE DIFFERENCES FOR', target_url, '====="')

    def _compare_http_title(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["title"], new_data["title"]
        if old_data == new_data:
            return
        print('"===== BEING HTTP_REQUEST.TITLE DIFFERENCES FOR', target_url, '====="')
        print(old_data)
        print(new_data)
        print('"===== END HTTP_REQUEST.TITLE DIFFERENCES FOR', target_url, '====="')

    def _compare_http_headers(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["headers"], new_data["headers"]
        diff: Any = []
        for k, v in old_data:
            if k not in new_data:
                diff.append(("-", v))
            if v != new_data[k]:
                diff.append(("-", v))
                diff.append(("+", new_data[k]))
        for k, v in new_data:
            if k not in old_data:
                diff.append(("+", v))
        if not diff:
            return
        print('"===== BEING HTTP_REQUEST.HEADERS DIFFERENCES FOR', target_url, '====="')
        for mod, val in diff:
            print(mod, val)
        print('"===== END HTTP_REQUEST.HEADERS DIFFERENCES FOR', target_url, '====="')

    def _compare_http_status_code(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["status_code"], new_data["status_code"]
        if old_data == new_data:
            return
        print(
            '"===== BEING HTTP_REQUEST.STATUS_CODE DIFFERENCES FOR',
            target_url,
            '====="',
        )
        print(old_data)
        print(new_data)
        print(
            '"===== END HTTP_REQUEST.STATUS_CODE DIFFERENCES FOR', target_url, '====="'
        )

    def _compare_dns(self, target_url: str, old_data: Any, new_data: Any):
        old_data, new_data = old_data["dns"], new_data["dns"]
        if old_data == new_data:
            return
        print('"===== BEING DNS DIFFERENCES FOR', target_url, '====="')
        print(old_data)
        print(new_data)
        print('"===== END DNS DIFFERENCES FOR', target_url, '====="')


def main():
    "Main function."
    main = Main()
    main.run()


if __name__ == "__main__":
    main()
