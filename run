#!/usr/bin/env python3

"""
This script queries the legacy and the new test helpers and
stores the results into the database.sqlite3 file.
"""

import datetime
import json
import multiprocessing
import random
import sqlite3
import subprocess
import sys

from typing import Dict
from typing import List
from typing import Optional
from typing import Tuple


class Main:
    "This is the main class."

    def __init__(self, config_file: str):
        self._config = json.load(open(config_file))
        self._conn = sqlite3.connect(self._config["database"])
        self._conn.execute(
            """CREATE TABLE IF NOT EXISTS results(
                date text, backend text, target text, json text);"""
        )
        self._known_urls: Dict[Tuple[str, str], bool] = {}
        cur = self._conn.execute("select backend, target from results;")
        for entry in cur:
            backend: str = str(entry[0])
            target: str = str(entry[1])
            self._known_urls[(backend, target)] = True
        self._exec(["./buildoohelper"])  # idempotent script

    def run(self):
        "Walks the test lists and fetches URLs using the available test helpers."
        with multiprocessing.Pool() as pool:
            for output in pool.imap_unordered(self._child_main, self._iterate_input()):
                if output is None:
                    continue
                backend_url, target_url, data = output
                self._commit(backend_url, target_url, data)

    def _iterate_input(self):
        helpers = self._config["helpers"].values()
        with open(self._config["input_file"]) as filep:
            for line in filep:
                target_url = line.strip()
                for backend_url in helpers:
                    input = (backend_url, target_url)
                    if input in self._known_urls:
                        continue
                    yield input

    @staticmethod
    def _child_main(input: Tuple[str, str]) -> Optional[Tuple[str, str, bytes]]:
        backend_url, target_url = input
        argv = [
            "./oohelper",
            "-target",
            target_url,
            "-server",
            backend_url,
        ]
        print("exec:", argv, file=sys.stderr)
        try:
            stdout = subprocess.run(argv, check=True, stdout=subprocess.PIPE).stdout
        except Exception as exc:
            print(exc, file=sys.stderr)
            return None
        return (backend_url, target_url, stdout)

    def _commit(self, backend_url: str, target_url: str, data: bytes):
        date = datetime.datetime.now().astimezone().isoformat()
        try:
            json.loads(data)  # ensure it's valid JSON
        except Exception as exc:
            print(exc, file=sys.stderr)
            return
        self._conn.execute(
            """INSERT INTO results VALUES(?, ?, ?, ?)""",
            (date, backend_url, target_url, data),
        )
        self._conn.commit()

    def _exec(self, args: List[str]):
        print("exec:", args, file=sys.stderr)
        subprocess.run(args, check=True)


def main():
    "Main function."
    if len(sys.argv) != 2:
        sys.exit("usage: ./run <config-file>")
    main = Main(sys.argv[1])
    main.run()


if __name__ == "__main__":
    main()
